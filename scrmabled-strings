#!/usr/bin/env python3

import sys

def fail(*args):
    print(*args, file=sys.stderr)
    sys.exit(1)

if not (len(sys.argv) == 5 and sys.argv[1] == "--dictionary" and sys.argv[3] == "--input"):
    fail("Usage:", sys.argv[0], "--dictionary <dictionary file> --input <input file>")

try:
    dictionary = open(sys.argv[2])
except OSError as E:
    fail("Could not open dictionary file:", E)

try:
    input = open(sys.argv[4])
except OSError as E:
    fail("Could not open input file:", E)

# Normalise scrambled words by sorting their middle characters.
def normalise(s):
    s = list(s)
    return s[:1] + sorted(s[1:-1]) + s[-1:]

# word is already normalised.  Compare it to each same-length substring of line
def occursin(word, line):
    substrings = [line[j:j+len(word)] for j in range(len(line)-len(word)+1)]
    return any([word == normalise(s) for s in substrings])

def valid(word):
    if word in words:
        fail("Repeated word:", word)
    elif not 2 <= len(word) <= 105:
        fail("Word length not supported:", word)
    elif not word.isalpha():
        fail("Word contains non-letter:", word)
    else:
        return word

# List the original words, checking for repeats, then normalise
words = []
for s in dictionary:
    words.append(valid(s.rstrip("\n")))
words = [normalise(s) for s in words]

if sum(map(len, words)) > 105:
    fail("Total of word lengths exceeds 105")

for (n, line) in enumerate(input, start=1):
    matches = [occursin(w, line) for w in words]
    print("Case #%d: %d" % (n, matches.count(True)))